// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.3.2 (swiftlang-1200.0.45 clang-1200.0.32.28)
// swift-module-flags: -target i386-apple-ios10.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name LemniskNotificationContent
import AVFoundation
import Foundation
import Swift
import UIKit
import UserNotifications
import UserNotificationsUI
extension UIColor {
  public static func colorWith(red: CoreGraphics.CGFloat, green: CoreGraphics.CGFloat, blue: CoreGraphics.CGFloat, alpha: CoreGraphics.CGFloat = 1.0) -> UIKit.UIColor
}
extension UIImage {
  public class func gif(data: Foundation.Data) -> UIKit.UIImage?
  public class func gif(url: Swift.String) -> UIKit.UIImage?
  public class func gif(name: Swift.String) -> UIKit.UIImage?
  @available(iOS 9.0, *)
  public class func gif(asset: Swift.String) -> UIKit.UIImage?
}
extension UIImageView {
  public func loadGif(name: Swift.String)
  @available(iOS 9.0, *)
  public func loadGif(asset: Swift.String)
}
@objc @_inheritsConvenienceInitializers open class LemniskNotificationViewController : UIKit.UIViewController, UserNotificationsUI.UNNotificationContentExtension {
  open var lemniskNotificationView: LemniskNotificationContent.LemniskNotificationView?
  @objc override dynamic open func viewDidLoad()
  @objc open func didReceive(_ notification: UserNotifications.UNNotification)
  @objc public func didReceive(_ response: UserNotifications.UNNotificationResponse, completionHandler completion: @escaping (UserNotificationsUI.UNNotificationContentExtensionResponseOption) -> Swift.Void)
  @objc deinit
  @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
}
extension LemniskNotificationViewController : UIKit.UICollectionViewDelegate, UIKit.UICollectionViewDataSource, UIKit.UICollectionViewDelegateFlowLayout {
  @objc dynamic public func numberOfSections(in collectionView: UIKit.UICollectionView) -> Swift.Int
  @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, numberOfItemsInSection section: Swift.Int) -> Swift.Int
  @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, cellForItemAt indexPath: Foundation.IndexPath) -> UIKit.UICollectionViewCell
  @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, layout collectionViewLayout: UIKit.UICollectionViewLayout, sizeForItemAt indexPath: Foundation.IndexPath) -> CoreGraphics.CGSize
  @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, didSelectItemAt indexPath: Foundation.IndexPath)
  @objc dynamic public func scrollViewDidEndDecelerating(_ scrollView: UIKit.UIScrollView)
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers open class LemniskNotificationView : UIKit.UIView {
  @objc @IBOutlet weak public var collectionviewHeightConstraint: UIKit.NSLayoutConstraint!
  @objc @IBOutlet weak public var carousalCollection: UIKit.UICollectionView!
  @objc required dynamic public init?(coder: Foundation.NSCoder)
  public func setRootView(rootView: UIKit.UIView)
  @objc deinit
}
extension PropertyListDecoder {
  public func decode<T>(_ type: T.Type, from data: Foundation.Data, skipKeyPath keypath: Swift.String?) throws -> T? where T : Swift.Decodable
}
